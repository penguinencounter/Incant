import { ByteArrayTag, ByteTag, CompoundTag, IntTag, ListTag, Tag } from './nbt.js'
import { StreamReader } from './shared.js'
let tag = Tag.fromStream(new StreamReader('{data:{"hexcasting:type": "hexcasting:list", "hexcasting:data": [{"hexcasting:type": "hexcasting:pattern", "hexcasting:data": {angles: [5, 5, 5], start_dir: 4}}, {"hexcasting:type": "hexcasting:double", "hexcasting:data": 1.50109305E8}, {"hexcasting:type": "hexcasting:pattern", "hexcasting:data": {angles: [1, 1, 1], start_dir: 1}}, {"hexcasting:type": "hexcasting:pattern", "hexcasting:data": {angles: [5, 0, 4, 1, 4, 0, 5], start_dir: 5}}, {"hexcasting:type": "hexcasting:pattern", "hexcasting:data": {angles: [2, 2, 0, 4, 4], start_dir: 5}}, {"hexcasting:type": "hexcasting:pattern", "hexcasting:data": {angles: [5], start_dir: 3}}, {"hexcasting:type": "hexcasting:pattern", "hexcasting:data": {angles: [5, 5, 5], start_dir: 4}}, {"hexcasting:type": "hexcasting:pattern", "hexcasting:data": {angles: [5, 5, 5], start_dir: 4}}, {"hexcasting:type": "moreiotas:string", "hexcasting:data": "Demo expired"}, {"hexcasting:type": "hexcasting:pattern", "hexcasting:data": {angles: [1, 1, 1], start_dir: 1}}, {"hexcasting:type": "hexcasting:pattern", "hexcasting:data": {angles: [5, 0, 4, 1, 4, 0, 5], start_dir: 5}}, {"hexcasting:type": "hexcasting:pattern", "hexcasting:data": {angles: [2, 1], start_dir: 0}}, {"hexcasting:type": "hexcasting:pattern", "hexcasting:data": {angles: [4], start_dir: 2}}, {"hexcasting:type": "hexcasting:pattern", "hexcasting:data": {angles: [1, 1, 1], start_dir: 1}}, {"hexcasting:type": "hexcasting:pattern", "hexcasting:data": {angles: [5, 5, 5], start_dir: 4}}, {"hexcasting:type": "hexcasting:vec3", "hexcasting:data": [-4567602199223336960L, 4634661413401395200L, 4645665325772177408L]}, {"hexcasting:type": "hexcasting:pattern", "hexcasting:data": {angles: [2, 1, 2, 0, 0, 1, 2, 0], start_dir: 1}}, {"hexcasting:type": "hexcasting:pattern", "hexcasting:data": {angles: [1, 1, 1], start_dir: 1}}, {"hexcasting:type": "hexcasting:pattern", "hexcasting:data": {angles: [5, 0, 4, 1, 4, 0, 5], start_dir: 5}}, {"hexcasting:type": "hexcasting:pattern", "hexcasting:data": {angles: [5, 5, 5, 0, 5, 5, 5, 5, 5, 4, 5], start_dir: 4}}, {"hexcasting:type": "hexcasting:pattern", "hexcasting:data": {angles: [4, 0, 2, 2], start_dir: 2}}, {"hexcasting:type": "hexcasting:pattern", "hexcasting:data": {angles: [2, 1, 4, 5, 5], start_dir: 2}}]}}'))
console.log(tag)
let tagc = tag as CompoundTag
tagc.recursiveRewrite((k, _) => k === 'angles', (tag2) => new ByteArrayTag(tag2.value.map((it: IntTag) => new ByteTag(it.value))))

console.log(tagc.toString())
